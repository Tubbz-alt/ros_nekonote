#!/usr/bin/env python

# Copyright (c) 2016, RT Corporation
# All rights reserved.
#
# License: BSD
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# * Neither the name of the RT Corporation nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

from dynamic_reconfigure.parameter_generator_catkin import (
    ParameterGenerator,
    double_t,
    str_t,
)

gen = ParameterGenerator()

gen.add(
    'goal_time', double_t, 0,
    "Amount of time (s) controller is permitted to be late achieving goal",
    0.1, 0.0, 120.0,
)

joints = (
    'joint0', 'joint1', 'joint2', 'joint3', 'joint4', 'joint5',
    )

for joint in joints:
    gen.add(
        'name_of_' + joint, str_t, 0,
        "Name of " + joint + ". DO NOT CHANGE.", joint,
    )

params = ('_goal', '_trajectory',)
msg = (
    " - maximum final error",
    " - maximum error during trajectory execution",
    )
min = (-1.0, -1.0,)
default = (-1.0, 0.2,)
max = (1.0, 1.0,)

for idx, param in enumerate(params):
    for joint in joints:
        gen.add(
            joint + param, double_t, 0, joint + msg[idx],
            default[idx], min[idx], max[idx]
        )

exit(gen.generate('nekonote_driver', '', 'PositionJointTrajectoryActionServer'))
